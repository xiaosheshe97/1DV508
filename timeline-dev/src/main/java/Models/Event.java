package Models;

import Utils.DatabaseController;
import org.hibernate.annotations.CreationTimestamp;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.Date;

@Entity
public class Event {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
   // @Column(name="id")
    private int id; //id is generated by the DB (do not set it)

    private String name;
    private String description;
    private String image;

    //if the timeline uses one of the time presets
    private LocalDateTime startDate;

    private LocalDateTime endDate;

    //if the timeline uses a custom time unit

    private int startInt;

    private int endInt;

    //userID that created this event
    @ManyToOne(fetch = FetchType.LAZY)
   // @JoinColumn(name = "fk_userid")
    private User createdBy;

    @CreationTimestamp
    private Date creationDate;
    //if of the timeline where the event is in
    @ManyToOne
    //@JoinColumn(name = "fk_timeline")
    private Timeline timeline;

    //private int timelineID;

    public Event() {}

    /*public Event(int id, String name, String description, String image, Date endDate, Date startDate,int start, int end, Timeline timeline, User createdBy) {
        this.id = id;
        this.name = name;
        this.description = description;
        this.image = image;
        this.endDate = endDate;
        this.startDate = startDate;
        this.startInt = start;
        this.endInt = end;
        this.timeline = timeline;
        this.createdBy = createdBy;
    }*/

    public String getName() {
        return name;
    }

    public void setName(String name) {
        if (name.isEmpty()){
            throw new IllegalArgumentException("Name can not be Empty,Please enter a name for event");
        }
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public LocalDateTime getEndDate() {
        return endDate;
    }

    public void setEndDate(LocalDateTime endDate) {
        if(endDate == null || endDate.isBefore(this.startDate))
            throw new RuntimeException("End date must be after Start date");
        this.endDate = endDate;
    }

    public LocalDateTime getStartDate() {
        return startDate;
    }

    public void setStartDate(LocalDateTime startDate) {
        this.startDate = startDate;
    }

    public int getStart() {
        return startInt;
    }

    public void setStart(int start) {
        this.startInt = start;
    }

    public int getEnd() {
        return endInt;
    }

    public void setEnd(int end) {
        this.endInt = end;
    }

    public User getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(User createdBy) {
        this.createdBy = createdBy;
    }

    public Timeline getTimelineID() {
        return timeline;
    }

    public void setTimelineID(Timeline timelineID) {
        this.timeline = timelineID;
    }

    public Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(Date createdAt) {
        this.creationDate = createdAt;
    }

    public Timeline getTimeline() {
        return timeline;
    }

    public void setTimeline(Timeline timeline) {
        this.timeline = timeline;
    }


    //DB CRUD
    public void save() {
        DatabaseController.createRecord(this);
    }

    public void update() {
        DatabaseController.createRecord(this);
    }

    public void delete() {
        DatabaseController.deleteRecord(this.id, Event.class);
    }

    static public Event load(int id) {
        return (Event) DatabaseController.getRecord(id,Event.class);
    }

}